---
layout: ../../../layouts/MarkdownPostLayout.astro
pubDate: 2024-12-17
title: '프론트엔드 성능 최적화 가이드 2장'
description: '프론트엔드 성능최적화 방법에 대해 알아보자.'
tags: ["성능최적화"]
---

## 2장
### 목적
- CSS 애니메이션 최적화
- 컴포넌트 지연 로딩 : 1장에서는 페이지 단위로 적용했다면 여기서는 단일 컴포넌트에 적용하고, 쓰이는 순간 불러온다.
- 컴포넌트 사전 로딩 : 코드가 필요한 시점보다 먼저 코드를 로드해서 지연없이 사용할 수 있도록 한다.
- 이미지 사전 로딩 : 컴포넌트와 마찬가지로 필요한 시점보다 먼저 다운하고, 필요할 때 바로 보여줄 수 있게 한다.

### 애니메이션 최적화
![](../images/2024-12-17-23-44-55.png)
막대 그래프를 클릭하면 width가 변한다.
CPU를 많이 사용하면서 끊기는 것을 확인하기 위해 우리는 performance에서 톱니바퀴를 누르고 CPU에서 6x slowdown을 걸어볼 수 있다.
> 요소가 화면에 많지 않고 width정도만 바뀌기 때문에 현재 PC에다가 최신 브라우저에서는 20배 정도 제한을 걸어야 조금 버벅거리는게 보인다.


코드는 아래와 같다.
```Bar.ts
const BarGraph = styled.div`
    width: ${({width}) => width}%;
    transition: width 1.5s ease;
    /* 다른 스타일.. */
`
```

끊김 현상은 쟁크(jank)현상이라고 하는데, width를 바꾸는데 왜 끊김 현상이 일어나는지에 대해 이해하기 위해서 브라우저에서 애니메이션은 어떻게 동작하는지, 화면을 어떻게 그리는지에 대해 이해할 필요가 있다.

### 애니메이션
애니메이션의 원리는 이미지를 빠르게 전환해서 우리 눈에 잔상을 남겨서 움직이는 것처럼 느껴지게 하는 것이다.
이 때 중간에 1장의 이미지가 없다면 우리는 끊기는듯한 느낌을 받을 것이다.
브라우저에서 애니메이션이 끊기는 듯한 느낌을 받는 것은 CPU가 다른 일을 하느라 중간에 몇 장의 화면을 처리하지 못한 것이다.
만약, 모니터가 60프레임일 경우 애니메이션은 60프레임으로 표시될 것인데, 일부 프레임이 누락되는 과정을 알고 싶다면 브라우저가 화면에 그리는 과정을 알아야 한다.

### 브라우저 렌더링 과정
